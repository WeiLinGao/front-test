{"ast":null,"code":"import * as ac from './actions/actionCreators'; // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);\n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    let res = await axios.get(`/api/campuses/${id}`);\n    dispatch(ac.fetchCampus(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addCampusThunk = campus => async dispatch => {\n  // The THUNK\n  try {\n    let res = await axios.post(`/api/campuses`, campus);\n\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// THUNK CREATOR:\nexport const deleteCampusThunk = campusId => async dispatch => {\n  // The THUNK\n  try {\n    await axios.delete(`/api/campuses/${campusId}`);\n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteCampus(campusId));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// THUNK CREATOR:\nexport const editCampusThunk = campus => async dispatch => {\n  try {\n    const response = await axios.put(`/api/campuses/${campus.id}`, campus);\n    if (response.status >= 200 && response.status < 300) {\n      const updatedCampus = response.data;\n      dispatch(ac.editCampus(updatedCampus));\n      return updatedCampus;\n    } else {\n      console.error(`Unexpected status code: ${response.status}`);\n      // Handle unexpected status codes\n    }\n  } catch (error) {\n    console.error('Error editing campus:', error);\n    throw error; // Rethrow the error to propagate it\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);\n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);\n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);\n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student);\n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n    return updatedStudent;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);\n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"names":["ac","axios","require","fetchAllCampusesThunk","dispatch","res","get","fetchAllCampuses","data","err","console","error","fetchCampusThunk","id","fetchCampus","addCampusThunk","campus","post","addCampus","deleteCampusThunk","campusId","delete","deleteCampus","editCampusThunk","response","put","status","updatedCampus","editCampus","fetchAllStudentsThunk","fetchAllStudents","addStudentThunk","student","addStudent","deleteStudentThunk","studentId","deleteStudent","editStudentThunk","updatedStudent","editStudent","fetchStudentThunk","fetchStudent"],"sources":["C:/Users/Weili/front_starter/src/store/thunks.js"],"sourcesContent":["import * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\r\nconst axios = require('axios');\r\n\r\n//All Campuses\r\n// THUNK CREATOR:\r\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get \"campuses\" data from database\r\n    let res = await axios.get(`/api/campuses`);  \r\n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.fetchAllCampuses(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Single Campus\r\n// THUNK CREATOR:\r\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\r\n  try {\r\n   \r\n    let res = await axios.get(`/api/campuses/${id}`);  \r\n    dispatch(ac.fetchCampus(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport const addCampusThunk = (campus) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    \r\n    let res = await axios.post(`/api/campuses`, campus);  \r\n    \r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.addCampus(res.data));\r\n    return res.data;\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n\r\n// THUNK CREATOR:\r\nexport const deleteCampusThunk = campusId => async dispatch => {  // The THUNK\r\n  try {\r\n   \r\n    await axios.delete(`/api/campuses/${campusId}`);  \r\n    // Delete successful so change state with dispatch\r\n    dispatch(ac.deleteCampus(campusId));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n\r\n// THUNK CREATOR:\r\nexport const editCampusThunk = campus => async dispatch => {\r\n  try {\r\n    const response = await axios.put(`/api/campuses/${campus.id}`, campus);\r\n\r\n    if (response.status >= 200 && response.status < 300) {\r\n      const updatedCampus = response.data;\r\n      dispatch(ac.editCampus(updatedCampus));\r\n      return updatedCampus;\r\n    } else {\r\n      console.error(`Unexpected status code: ${response.status}`);\r\n      // Handle unexpected status codes\r\n    }\r\n  } catch (error) {\r\n    console.error('Error editing campus:', error);\r\n    throw error; // Rethrow the error to propagate it\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// All Students\r\n// THUNK CREATOR:\r\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get \"students\" data from database\r\n    let res = await axios.get(`/api/students`);  \r\n    // Call Action Creator to return Action object (type + payload with \"students\" data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.fetchAllStudents(res.data));  \r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Add Student\r\n// THUNK CREATOR:\r\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"post\" call to add \"student\" object's data to database\r\n    let res = await axios.post(`/api/students`, student);  \r\n    // Call Action Creator to return Action object (type + payload with new students data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.addStudent(res.data));\r\n    return res.data;\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Delete Student\r\n// THUNK CREATOR:\r\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"delete\" call to delete student (based on \"studentID\") from database\r\n    await axios.delete(`/api/students/${studentId}`);  \r\n    // Delete successful so change state with dispatch\r\n    dispatch(ac.deleteStudent(studentId));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Edit Student\r\n// THUNK CREATOR:\r\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\r\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \r\n    // Update successful so change state with dispatch\r\n    dispatch(ac.editStudent(updatedStudent));\r\n    return updatedStudent;\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Single Student\r\n// THUNK CREATOR:\r\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get a specific student (based on \"id\") data from database\r\n    let res = await axios.get(`/api/students/${id}`);  \r\n    // Call Action Creator to return Action object (type + payload with student data)\r\n    // Then dispatch the Action object to Reducer to display student data \r\n    dispatch(ac.fetchStudent(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}