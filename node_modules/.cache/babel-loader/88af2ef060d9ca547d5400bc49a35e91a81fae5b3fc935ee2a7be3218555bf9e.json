{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Weili\\\\front_starter\\\\src\\\\components\\\\containers\\\\CampusContainer.js\";\n/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\nimport { deleteCampusThunk } from \"../../store/thunks\";\nimport { addCampusThunk } from \"../../store/thunks\";\nimport { editCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\nimport { deleteStudentThunk } from \"../../store/thunks\";\nimport AllStudentsView from '../views/AllStudentsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        allCampuses: this.props.allCampuses,\n        deleteCampus: this.props.deleteCampus,\n        addCampus: this.props.addCampus,\n        editCampus: this.props.editCampus,\n        deleteStudent: this.props.deleteStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: id => dispatch(deleteCampusThunk(id)),\n    addCampus: id => dispatch(addCampusThunk(id)),\n    editCampus: id => dispatch(editCampusThunk(id)),\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteStudent: id => dispatch(deleteStudentThunk(id))\n  };\n};\nCampusContainer.propTypes = {\n  Campus: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired\n};\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","PropTypes","fetchCampusThunk","deleteCampusThunk","addCampusThunk","editCampusThunk","CampusView","deleteStudentThunk","AllStudentsView","jsxDEV","_jsxDEV","CampusContainer","componentDidMount","props","fetchCampus","match","params","id","render","children","fileName","_jsxFileName","lineNumber","columnNumber","campus","allCampuses","deleteCampus","addCampus","editCampus","deleteStudent","mapState","state","mapDispatch","dispatch","propTypes","Campus","array","isRequired","fetchAllCampuses","func"],"sources":["C:/Users/Weili/front_starter/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { fetchCampusThunk } from \"../../store/thunks\";\r\nimport { deleteCampusThunk } from \"../../store/thunks\";\r\nimport { addCampusThunk} from \"../../store/thunks\";\r\nimport { editCampusThunk} from \"../../store/thunks\";\r\nimport { CampusView } from \"../views\";\r\nimport { deleteStudentThunk } from \"../../store/thunks\";\r\nimport AllStudentsView from '../views/AllStudentsView';\r\n\r\nclass CampusContainer extends Component {\r\n  // Get the specific campus data from back-end database\r\n  componentDidMount() {\r\n    // Get campus ID from URL (API link)\r\n    this.props.fetchCampus(this.props.match.params.id);\r\n  }\r\n\r\n  // Render a Campus view by passing campus data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <CampusView campus={this.props.campus}\r\n        allCampuses={this.props.allCampuses}\r\n        deleteCampus={this.props.deleteCampus}\r\n        addCampus={this.props.addCampus}\r\n        editCampus={this.props.editCampus}\r\n        deleteStudent={this.props.deleteStudent}   \r\n      />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    deleteCampus: (id) => dispatch(deleteCampusThunk(id)),\r\n    addCampus: (id) => dispatch(addCampusThunk(id)),\r\n    editCampus: (id) => dispatch(editCampusThunk(id)),\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n    deleteStudent: (id) => dispatch(deleteStudentThunk(id)),\r\n  };\r\n};\r\nCampusContainer.propTypes = {\r\n  Campus: PropTypes.array.isRequired,\r\n  fetchAllCampuses: PropTypes.func.isRequired,\r\n};\r\n// Export store-connected container by default\r\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,cAAc,QAAO,oBAAoB;AAClD,SAASC,eAAe,QAAO,oBAAoB;AACnD,SAASC,UAAU,QAAQ,UAAU;AACrC,SAASC,kBAAkB,QAAQ,oBAAoB;AACvD,OAAOC,eAAe,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,eAAe,SAASZ,SAAS,CAAC;EACtC;EACAa,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,IAAI,CAACD,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC;EACpD;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,oBACER,OAAA;MAAAS,QAAA,gBACET,OAAA,CAACb,MAAM;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVb,OAAA,CAACJ,UAAU;QAACkB,MAAM,EAAE,IAAI,CAACX,KAAK,CAACW,MAAO;QACtCC,WAAW,EAAE,IAAI,CAACZ,KAAK,CAACY,WAAY;QACpCC,YAAY,EAAE,IAAI,CAACb,KAAK,CAACa,YAAa;QACtCC,SAAS,EAAE,IAAI,CAACd,KAAK,CAACc,SAAU;QAChCC,UAAU,EAAE,IAAI,CAACf,KAAK,CAACe,UAAW;QAClCC,aAAa,EAAE,IAAI,CAAChB,KAAK,CAACgB;MAAc;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEG,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMO,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLP,MAAM,EAAEO,KAAK,CAACP,MAAM,CAAG;EACzB,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMQ,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLnB,WAAW,EAAGG,EAAE,IAAKgB,QAAQ,CAAC/B,gBAAgB,CAACe,EAAE,CAAC,CAAC;IACnDS,YAAY,EAAGT,EAAE,IAAKgB,QAAQ,CAAC9B,iBAAiB,CAACc,EAAE,CAAC,CAAC;IACrDU,SAAS,EAAGV,EAAE,IAAKgB,QAAQ,CAAC7B,cAAc,CAACa,EAAE,CAAC,CAAC;IAC/CW,UAAU,EAAGX,EAAE,IAAKgB,QAAQ,CAAC5B,eAAe,CAACY,EAAE,CAAC,CAAC;IACjDH,WAAW,EAAGG,EAAE,IAAKgB,QAAQ,CAAC/B,gBAAgB,CAACe,EAAE,CAAC,CAAC;IACnDY,aAAa,EAAGZ,EAAE,IAAKgB,QAAQ,CAAC1B,kBAAkB,CAACU,EAAE,CAAC;EACxD,CAAC;AACH,CAAC;AACDN,eAAe,CAACuB,SAAS,GAAG;EAC1BC,MAAM,EAAElC,SAAS,CAACmC,KAAK,CAACC,UAAU;EAClCC,gBAAgB,EAAErC,SAAS,CAACsC,IAAI,CAACF;AACnC,CAAC;AACD;AACA;AACA;AACA,eAAerC,OAAO,CAAC8B,QAAQ,EAAEE,WAAW,CAAC,CAACrB,eAAe,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}