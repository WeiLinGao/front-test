{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Weili\\\\front_starter\\\\src\\\\components\\\\containers\\\\AllCampusesContainer.js\";\n/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport { deleteCampusThunk } from \"../../store/thunks\";\nimport { addCampusThunk } from \"../../store/thunks\";\nimport { editCampusThunk } from \"../../store/thunks\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from back-end database\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllCampusesView, {\n        allCampuses: this.props.allCampuses,\n        deleteCampus: this.props.deleteCampus,\n        addCampus: this.props.addCampus,\n        editCampus: this.props.editCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses // Get the State object from Reducer \"allCampuses\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: campusId => dispatch(deleteCampusThunk(campusId)),\n    addCampus: campusId => dispatch(addCampusThunk(campusId)),\n    editCampus: () => dispatch(editCampusThunk()),\n    fetchCampus: campusId => dispatch(fetchCampusThunk(campusId))\n  };\n};\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired\n};\n\n// Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","map":{"version":3,"names":["Header","Component","PropTypes","connect","fetchAllCampusesThunk","deleteCampusThunk","addCampusThunk","editCampusThunk","fetchCampusThunk","AllCampusesView","jsxDEV","_jsxDEV","AllCampusesContainer","componentDidMount","console","log","props","fetchAllCampuses","render","children","fileName","_jsxFileName","lineNumber","columnNumber","allCampuses","deleteCampus","addCampus","editCampus","mapState","state","mapDispatch","dispatch","campusId","fetchCampus","propTypes","array","isRequired","func"],"sources":["C:/Users/Weili/front_starter/src/components/containers/AllCampusesContainer.js"],"sourcesContent":["/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\r\nimport { deleteCampusThunk } from \"../../store/thunks\";\r\nimport { addCampusThunk} from \"../../store/thunks\";\r\nimport { editCampusThunk} from \"../../store/thunks\";\r\nimport { fetchCampusThunk } from \"../../store/thunks\";\r\n\r\n\r\nimport { AllCampusesView } from \"../views\";\r\n\r\nclass AllCampusesContainer extends Component {\r\n  // Get all campuses data from back-end database\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <AllCampusesView\r\n          allCampuses={this.props.allCampuses}\r\n          deleteCampus={this.props.deleteCampus}\r\n          addCampus={this.props.addCampus}\r\n          editCampus={this.props.editCampus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n  };\r\n};  \r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n    deleteCampus: (campusId) => dispatch(deleteCampusThunk(campusId)),\r\n    addCampus: (campusId) => dispatch(addCampusThunk(campusId)),\r\n    editCampus: () => dispatch(editCampusThunk()),\r\n    fetchCampus: (campusId) => dispatch(fetchCampusThunk(campusId))\r\n  };\r\n};\r\n\r\n// Type check props;\r\nAllCampusesContainer.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n  fetchAllCampuses: PropTypes.func.isRequired,\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,cAAc,QAAO,oBAAoB;AAClD,SAASC,eAAe,QAAO,oBAAoB;AACnD,SAASC,gBAAgB,QAAQ,oBAAoB;AAGrD,SAASC,eAAe,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,oBAAoB,SAASX,SAAS,CAAC;EAC3C;EACAY,iBAAiBA,CAAA,EAAG;IAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;IACvB,IAAI,CAACA,KAAK,CAACC,gBAAgB,CAAC,CAAC;EAC/B;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,oBACEP,OAAA;MAAAQ,QAAA,gBACER,OAAA,CAACX,MAAM;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVZ,OAAA,CAACF,eAAe;QACde,WAAW,EAAE,IAAI,CAACR,KAAK,CAACQ,WAAY;QACpCC,YAAY,EAAE,IAAI,CAACT,KAAK,CAACS,YAAa;QACtCC,SAAS,EAAE,IAAI,CAACV,KAAK,CAACU,SAAU;QAChCC,UAAU,EAAE,IAAI,CAACX,KAAK,CAACW;MAAW;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMK,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLL,WAAW,EAAEK,KAAK,CAACL,WAAW,CAAG;EACnC,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMM,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLd,gBAAgB,EAAEA,CAAA,KAAMc,QAAQ,CAAC3B,qBAAqB,CAAC,CAAC,CAAC;IACzDqB,YAAY,EAAGO,QAAQ,IAAKD,QAAQ,CAAC1B,iBAAiB,CAAC2B,QAAQ,CAAC,CAAC;IACjEN,SAAS,EAAGM,QAAQ,IAAKD,QAAQ,CAACzB,cAAc,CAAC0B,QAAQ,CAAC,CAAC;IAC3DL,UAAU,EAAEA,CAAA,KAAMI,QAAQ,CAACxB,eAAe,CAAC,CAAC,CAAC;IAC7C0B,WAAW,EAAGD,QAAQ,IAAKD,QAAQ,CAACvB,gBAAgB,CAACwB,QAAQ,CAAC;EAChE,CAAC;AACH,CAAC;;AAED;AACApB,oBAAoB,CAACsB,SAAS,GAAG;EAC/BV,WAAW,EAAEtB,SAAS,CAACiC,KAAK,CAACC,UAAU;EACvCnB,gBAAgB,EAAEf,SAAS,CAACmC,IAAI,CAACD;AACnC,CAAC;;AAED;AACA;AACA;AACA,eAAejC,OAAO,CAACyB,QAAQ,EAAEE,WAAW,CAAC,CAAClB,oBAAoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}