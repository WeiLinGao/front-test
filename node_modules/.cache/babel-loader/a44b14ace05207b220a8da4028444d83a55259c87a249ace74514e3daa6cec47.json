{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Weili\\\\front_starter\\\\src\\\\components\\\\containers\\\\StudentContainer.js\";\n/*==================================================\r\nStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStudentThunk } from \"../../store/thunks\";\nimport { fetchAllStudentsThunk, deleteStudentThunk, addStudentThunk, editStudentThunk } from '../../store/thunks';\nimport StudentView from '../views/StudentView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass StudentContainer extends Component {\n  // Get student data from back-end database\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchStudent(this.props.match.params.id);\n  }\n\n  // Render Student view by passing student data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StudentView, {\n        student: this.props.student\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), \"deleteStudent=\", this.props.deleteStudent, \"editStudent=\", this.props.editStudent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = state => {\n  return {\n    student: state.student // Get the State object from Reducer \"student\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    deleteStudent: studentId => dispatch(deleteStudentThunk(studentId)),\n    editStudent: studentId => dispatch(editStudentThunk(studentId))\n  };\n};\n\n// Export store-connected container by default\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(StudentContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchStudentThunk","fetchAllStudentsThunk","deleteStudentThunk","addStudentThunk","editStudentThunk","StudentView","jsxDEV","_jsxDEV","StudentContainer","componentDidMount","props","fetchStudent","match","params","id","render","children","fileName","_jsxFileName","lineNumber","columnNumber","student","deleteStudent","editStudent","mapState","state","mapDispatch","dispatch","studentId"],"sources":["C:/Users/Weili/front_starter/src/components/containers/StudentContainer.js"],"sourcesContent":["/*==================================================\r\nStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStudentThunk } from \"../../store/thunks\";\r\nimport { \r\n  fetchAllStudentsThunk,\r\n  deleteStudentThunk,\r\n  addStudentThunk,\r\n  editStudentThunk,\r\n} from '../../store/thunks';\r\n\r\nimport StudentView from '../views/StudentView';\r\nclass StudentContainer extends Component {\r\n  // Get student data from back-end database\r\n  componentDidMount() {\r\n    //getting student ID from url\r\n    this.props.fetchStudent(this.props.match.params.id);\r\n  }\r\n\r\n  // Render Student view by passing student data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <StudentView student={this.props.student} />\r\n        deleteStudent={this.props.deleteStudent}\r\n        editStudent={this.props.editStudent}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    student: state.student,  // Get the State object from Reducer \"student\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)),\r\n    editStudent: (studentId) => dispatch(editStudentThunk(studentId))\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(StudentContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,SACEC,qBAAqB,EACrBC,kBAAkB,EAClBC,eAAe,EACfC,gBAAgB,QACX,oBAAoB;AAE3B,OAAOC,WAAW,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC/C,MAAMC,gBAAgB,SAASV,SAAS,CAAC;EACvC;EACAW,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACC,KAAK,CAACC,YAAY,CAAC,IAAI,CAACD,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC;EACrD;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,oBACER,OAAA;MAAAS,QAAA,gBACET,OAAA,CAACX,MAAM;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVb,OAAA,CAACF,WAAW;QAACgB,OAAO,EAAE,IAAI,CAACX,KAAK,CAACW;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,kBAC9B,EAAC,IAAI,CAACV,KAAK,CAACY,aAAa,EAAC,cAC5B,EAAC,IAAI,CAACZ,KAAK,CAACa,WAAW;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAEV;AACF;;AAEA;AACA;AACA,MAAMI,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLJ,OAAO,EAAEI,KAAK,CAACJ,OAAO,CAAG;EAC3B,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMK,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLhB,YAAY,EAAGG,EAAE,IAAKa,QAAQ,CAAC3B,iBAAiB,CAACc,EAAE,CAAC,CAAC;IACrDQ,aAAa,EAAGM,SAAS,IAAKD,QAAQ,CAACzB,kBAAkB,CAAC0B,SAAS,CAAC,CAAC;IACrEL,WAAW,EAAGK,SAAS,IAAKD,QAAQ,CAACvB,gBAAgB,CAACwB,SAAS,CAAC;EAClE,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,eAAe7B,OAAO,CAACyB,QAAQ,EAAEE,WAAW,CAAC,CAAClB,gBAAgB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}