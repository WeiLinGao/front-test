{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Weili\\\\front_starter\\\\src\\\\components\\\\containers\\\\EditStudentContainer.js\";\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EditStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      let student = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description\n      };\n      try {\n        let updatedStudent = await this.props.editStudent(student);\n        this.setState({\n          name: \"\",\n          address: \"\",\n          description: \"\",\n          redirect: true,\n          redirectId: updatedStudent.id\n        });\n      } catch (error) {\n        console.error('Error editing student:', error);\n      }\n    };\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    editStudent: student => dispatch(editStudentThunk(student)),\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(EditStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","useParams","EditStudentView","editStudentThunk","jsxDEV","_jsxDEV","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","state","address","description","updatedStudent","editStudent","redirect","redirectId","id","error","console","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","mapDispatch","dispatch","addStudent","addStudentThunk"],"sources":["C:/Users/Weili/front_starter/src/components/containers/EditStudentContainer.js"],"sourcesContent":["import Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport EditStudentView from '../views/EditStudentView';\r\nimport { editStudentThunk } from '../../store/thunks';\r\n\r\nclass EditStudentContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      name: \"\", \r\n      address: \"\", \r\n      description: null, \r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n\r\n\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  \r\n\r\n  let student= {\r\n    name: this.state.name,\r\n    address: this.state.address,\r\n    description: this.state.description\r\n  };\r\n\r\n  try {\r\n \r\n    let updatedStudent = await this.props.editStudent(student);\r\n\r\n    this.setState({\r\n      name: \"\", \r\n      address: \"\", \r\n      description: \"\",\r\n      redirect: true,  \r\n      redirectId: updatedStudent.id\r\n    });\r\n  } catch (error) {\r\n    \r\n    console.error('Error editing student:', error);\r\n  }\r\n  };\r\n\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <EditStudentView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        editStudent: (student) => dispatch(editStudentThunk(student)),\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(EditStudentContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}