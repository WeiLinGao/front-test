{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Weili\\\\front_starter\\\\src\\\\components\\\\containers\\\\NewStudentContainer.js\";\n/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user click the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId\n      };\n      try {\n        // Add new student in back-end database\n        let newStudent = await this.props.addStudent(student);\n\n        // Ensure newStudent exists and has an 'id' property before updating state\n        if (newStudent && newStudent.id) {\n          // Update state, and trigger redirect to show the new student\n          this.setState({\n            firstname: \"\",\n            lastname: \"\",\n            campusId: null,\n            email: '',\n            imgUrl: '',\n            gpa: '',\n            redirect: true,\n            redirectId: newStudent.id\n          });\n        } else {\n          console.error(\"Error: Invalid response or missing 'id' property\");\n          // Handle the error or show a message to the user\n        }\n      } catch (error) {\n        console.error(\"Error while adding student:\", error);\n        // Handle any errors that might occur during the asynchronous operation\n      }\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      campusId: null,\n      email: '',\n      imgUrl: '',\n      gpa: '',\n      redirect: false,\n      redirectId: null\n    };\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","jsxDEV","_jsxDEV","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","state","lastname","campusId","newStudent","addStudent","id","email","imgUrl","gpa","redirect","redirectId","console","error","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","mapDispatch","dispatch"],"sources":["C:/Users/Weili/front_starter/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewStudentView from '../views/NewStudentView';\r\nimport { addStudentThunk } from '../../store/thunks';\r\n\r\nclass NewStudentContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      campusId: null, \r\n      email: '',\r\n      imgUrl: '',\r\n      gpa: '',\r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let student = {\r\n        firstname: this.state.firstname,\r\n        lastname: this.state.lastname,\r\n        campusId: this.state.campusId\r\n    };\r\n    \r\n    try {\r\n      // Add new student in back-end database\r\n      let newStudent = await this.props.addStudent(student);\r\n  \r\n      // Ensure newStudent exists and has an 'id' property before updating state\r\n      if (newStudent && newStudent.id) {\r\n        // Update state, and trigger redirect to show the new student\r\n        this.setState({\r\n          firstname: \"\",\r\n          lastname: \"\",\r\n          campusId: null,\r\n          email: '',\r\n          imgUrl: '',\r\n          gpa: '',\r\n          redirect: true,\r\n          redirectId: newStudent.id\r\n        });\r\n      } else {\r\n        console.error(\"Error: Invalid response or missing 'id' property\");\r\n        // Handle the error or show a message to the user\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error while adding student:\", error);\r\n      // Handle any errors that might occur during the asynchronous operation\r\n    }\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewStudentView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}